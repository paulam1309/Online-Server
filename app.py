# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10m7g8FFbB9-EHKAqBO75tViYmgDGnoaO

# **FastAPI (Servicio de Inferencia)**

Es el endpoint encargado de recibir ventanas, armar el dataframe con el orden de schema-json, llama al pipeline de SVM + Calibrador y devuelve predict_label + confianza.

LLama a su vez a policy engine en caso de que la confianza baje del 70%

**LIBRERÍAS**
"""

import os, json, joblib
import pandas as pd
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from starlette.middleware.cors import CORSMiddleware
import policy  # importa el motor de reglas
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timezone
from typing import Optional, Dict, Any

"""**CONEXIÓN CON CON LA BASE DE DATOS**"""

DATABASE_URL = os.environ["DATABASE_URL"]
def get_conn():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

"""**Función de tiempos**"""

def _to_utc(dt):
    # si viene sin tz, asúmelo en UTC
    return dt if dt.tzinfo else dt.replace(tzinfo=timezone.utc)

"""**CARGA DE ARCHIVOS NECESARIOS**"""

MODEL_PATH = os.getenv("MODEL_PATH", "models/svm_calibrado.pkl")
SCHEMA_PATH = os.getenv("SCHEMA_PATH", "processing/schema.json")

try:
    MODEL = joblib.load(MODEL_PATH)  # pipeline: scaler → SVM → calibración
except Exception as e:
    raise RuntimeError(f"No pude cargar el modelo en {MODEL_PATH}: {e}")

try:
    with open(SCHEMA_PATH, "r", encoding="utf-8") as f:
        SCHEMA = json.load(f)
    FEATURES = SCHEMA["features"]
    CLASSES = getattr(MODEL, "classes_", SCHEMA.get("classes", []))
except Exception as e:
    raise RuntimeError(f"No pude cargar el schema en {SCHEMA_PATH}: {e}")

"""**Configuraciones para conexión remota**"""

app = FastAPI(title="HAR Online – Inference")

# CORS para que la app de Flutter pueda llamar al API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], allow_credentials=True,
    allow_methods=["*"], allow_headers=["*"],
)

"""**Helpers**"""

# --- helpers ---
def _df_from_window_row(row: Dict[str, Any]) -> pd.DataFrame:
    if row.get("features"):
        feats: Dict[str, Any] = row["features"]
        data = {f: feats.get(f, 0.0) for f in FEATURES}
    else:
        data = {f: row.get(f, 0.0) for f in FEATURES}
    return pd.DataFrame([data], columns=FEATURES)

def _center_ts(row: Dict[str, Any]) -> float:
    st, et = row["start_time"], row["end_time"]
    c = st + (et - st) / 2
    if c.tzinfo is None:
        c = c.replace(tzinfo=timezone.utc)
    return c.timestamp()

def _svm_predict_row(row: Dict[str, Any]) -> tuple[str, float]:
    """Predicción con el SVM calibrado (idéntico a /predict_by_window)."""
    X = _df_from_window_row(row)
    proba = MODEL.predict_proba(X)[0]
    i_top = int(proba.argmax())
    pred_label = str(CLASSES[i_top])
    confianza = float(proba[i_top])
    return pred_label, confianza

def _update_window_preds(cur, win_id: int, pred_label: str, confianza: float) -> None:
    cur.execute(
        """
        UPDATE windows
           SET pred_label = %s,
               confianza  = %s
         WHERE id = %s
        """,
        (pred_label, confianza, win_id),
    )

"""**Models**"""

class PredictByWindowReq(BaseModel):
    id: int = Field(..., description="PK de windows")

class LabelReq(BaseModel):
    id_usuario: int
    session_id: int
    start_ts: datetime
    end_ts: datetime
    label: str
    reason: Optional[str] = None
    pending_id: int | None = None

class MarkReq(BaseModel):
    id_usuario: int
    session_id: int
    when: Optional[datetime] = None

class SLPredictReq(BaseModel):
    id: int
    actividad: str
    precision: Optional[float] = None

class PredictPendingReq(BaseModel):
    limit: int = 200
    id_usuario: Optional[int] = None
    session_id: Optional[int] = None

"""**Gets**


Realiza un monitoreo para corroborar que el servidor esté en producción y haya cargado los archivos.
"""

@app.get("/health")
def health():
    return {"ok": True, "model": os.path.basename(MODEL_PATH), "n_features": len(FEATURES)}

@app.get("/schema")
def schema():
    return {"features": FEATURES, "classes": list(map(str, CLASSES))}

"""**Endpoint de Ingest**


Se construye del Dataframe y se pasa al .pkl para obtener pred_label + confianza
"""

@app.post("/predict_by_window")
def predict_by_window(req: PredictByWindowReq):
    with get_conn() as conn, conn.cursor(cursor_factory=RealDictCursor) as cur:
        # 1) Leer ventana
        cur.execute("SELECT * FROM windows WHERE id = %s", (req.id,))
        w = cur.fetchone()
        if not w:
            raise HTTPException(404, f"id {req.id} no existe")

        # 2) Predicción
        pred_label, confianza = _svm_predict_row(w)

        uid = int(w["id_usuario"])
        sid = int(w["session_id"])
        center_ts = _center_ts(w)

        # 3) Motor de políticas
        ask, ask_reason = policy.should_ask(
            uid, sid, confianza, pred_label=pred_label, now_ts=center_ts
        )

        # 4) Persistir predicción en windows
        cur.execute(
            "UPDATE windows SET pred_label=%s, confianza=%s WHERE id=%s",
            (pred_label, confianza, req.id),
        )

        ask_id = None
        if ask:
            # registrar que preguntamos (cooldown, etc.)
            policy.mark_asked(uid, sid, center_ts)

            st = _to_utc(row["start_time"])
            et = _to_utc(row["end_time"])

            with get_conn() as conn2, conn2.cursor(cursor_factory=RealDictCursor) as cur2:
                # ¿ya existe una PENDIENTE sin label?
                cur2.execute(
                    """
                    SELECT id
                      FROM intervalos_label
                    WHERE session_id=%s
                      AND id_usuario=%s
                      AND label IS NULL
                    ORDER BY id DESC
                    LIMIT 1
                    """,
                    (session_id, id_usuario),
                )
                pend = cur2.fetchone()

                if pend:
                    ask_id = pend["id"]
                    cur2.execute(
                        """
                        UPDATE intervalos_label
                          SET reason   = %s,
                              start_ts = %s,
                              end_ts   = %s,
                              created_at = NOW()
                        WHERE id = %s
                        """,
                        (reason, st, et, ask_id),
                    )
                else:
                    # una sola pendiente por sesión → upsert sobre índice parcial
                    cur2.execute(
                        """
                        INSERT INTO intervalos_label
                            (session_id, start_ts, end_ts, reason, id_usuario, created_at, label)
                        VALUES
                            (%s, %s, %s, %s, %s, NOW(), NULL)
                        ON CONFLICT ON CONSTRAINT ux_intervals_sid_pending DO UPDATE
                          SET reason     = EXCLUDED.reason,
                              start_ts   = LEAST(intervalos_label.start_ts, EXCLUDED.start_ts),
                              end_ts     = GREATEST(intervalos_label.end_ts, EXCLUDED.end_ts),
                              id_usuario = EXCLUDED.id_usuario,
                              created_at = NOW()
                        RETURNING id
                        """,
                        (session_id, st, et, reason, id_usuario),
                    )
                    ask_id = cur2.fetchone()["id"]

                conn2.commit()

    return {
        "id": req.id,
        "pred_label": pred_label,
        "confianza": confianza,
        "ask_label": ask,
        "ask_reason": ask_reason,
        "ask_id": ask_id,
        "classes": list(map(str, CLASSES)),
    }

"""**Endpoint de prediccion pendiente**"""

@app.post("/predict_pending")
def predict_pending(req: PredictPendingReq):
    """
    Procesa ventanas donde pred_label es NULL.
    Puedes filtrar por id_usuario y/o session_id para un barrido específico.
    """
    done = 0

    # Construimos WHERE dinámico
    where = ["pred_label IS NULL"]
    params: list[Any] = []
    if req.id_usuario is not None:
        where.append("id_usuario = %s")
        params.append(req.id_usuario)
    if req.session_id is not None:
        where.append("session_id = %s")
        params.append(req.session_id)
    where_sql = " AND ".join(where)

    with get_conn() as conn, conn.cursor(cursor_factory=RealDictCursor) as cur:
        # Tomamos un lote estable y lo bloqueamos para evitar colisiones
        sql_sel = f"""
            SELECT *
              FROM windows
             WHERE {where_sql}
             ORDER BY id ASC
             LIMIT %s
             FOR UPDATE SKIP LOCKED
        """
        cur.execute(sql_sel, (*params, req.limit))
        rows = cur.fetchall()

        for row in rows:
            win_id = int(row["id"])
            # si no hay features JSON, _df_from_window_row usará columnas sueltas
            try:
                pred, conf = _svm_predict_row(row)
                _update_window_preds(cur, win_id, pred, conf)
                done += 1
            except Exception as e:
                # si una fila rara rompe, saltamos y seguimos con las demás
                # (opcional: loggear e)
                continue

        conn.commit()

    return {"processed": done}

"""**Endpoint para registrar que el usuario respondió una etiqueta**"""

@app.post("/label")
def post_label(req: LabelReq):
    st = _to_utc(w["start_time"])
    et = _to_utc(w["end_time"])
    if et <= st:
        raise HTTPException(400, "end_ts debe ser > start_ts")

    with get_conn() as conn, conn.cursor(cursor_factory=RealDictCursor) as cur:
        if req.pending_id:
            cur.execute(
                """
                UPDATE intervalos_label
                  SET label=%s,
                      start_ts=%s,
                      end_ts=%s,
                      reason=COALESCE(%s, reason),
                      duracion = EXTRACT(EPOCH FROM (%s - %s))::int
                WHERE id=%s AND id_usuario=%s AND session_id=%s
                """,
                (req.label, st, et, req.reason, et, st,
                req.pending_id, req.id_usuario, req.session_id),
            )
            if cur.rowcount > 0:
                interval_id = req.pending_id   # <-- añade esto
            else:
                req.pending_id = None

        if not req.pending_id:
            # Busca la última “pendiente” de esa sesión/usuario
            cur.execute(
                """
                SELECT id FROM intervalos_label
                 WHERE id_usuario=%s AND session_id=%s AND label IS NULL
                 ORDER BY id DESC LIMIT 1
                """,
                (req.id_usuario, req.session_id),
            )
            row = cur.fetchone()
            if row:
                cur.execute(
                    """
                    UPDATE intervalos_label
                       SET label=%s,
                           start_ts=%s,
                           end_ts=%s,
                           reason=COALESCE(%s, reason),
                           duracion = EXTRACT(EPOCH FROM (%s - %s))::int
                     WHERE id=%s
                    """,
                    (req.label, st, et, req.reason, et, st, row["id"]),
                )
                interval_id = row["id"]
            else:
                # No había pendiente → inserta normal (por compatibilidad)
                cur.execute(
                    """
                    INSERT INTO intervalos_label
                        (session_id, start_ts, end_ts, label, reason, id_usuario, duracion)
                    VALUES (%s,%s,%s,%s,%s,%s, EXTRACT(EPOCH FROM (%s - %s))::int)
                    RETURNING id
                    """,
                    (req.session_id, st, et, req.label, req.reason,
                     req.id_usuario, et, st),
                )
                interval_id = cur.fetchone()["id"]

        conn.commit()
    policy.mark_labeled(req.id_usuario, req.session_id, et.timestamp())
    return {"ok": True, "interval_id": interval_id}

@app.post("/policy/asked")
def policy_mark_asked(req: MarkReq):
    policy.mark_asked(req.id_usuario, req.session_id, req.when.timestamp() if req.when else None)
    return {"ok": True}

@app.post("/policy/labeled")
def policy_mark_labeled(req: MarkReq):
    policy.mark_labeled(req.id_usuario, req.session_id, req.when.timestamp() if req.when else None)
    return {"ok": True}

"""**SL**"""

@app.post("/sl/predict")
def sl_predict(req: SLPredictReq):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT id FROM windows WHERE id = %s", (req.id,))
        if not cur.fetchone():
            raise HTTPException(404, f"id {req.id} no existe")

        cur.execute("UPDATE windows SET actividad=%s WHERE id=%s", (req.actividad, req.id))
        conn.commit()
    return {"ok": True, "id": req.id, "actividad": req.actividad}